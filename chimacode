#include <stdio.h>
#include <stdint.h>
#include <unistd.h>
#include <fcntl.h>
#include <linux/i2c-dev.h>
#include <sys/ioctl.h>

#define GYRO_ADDRESS 0x6B // Address of the gyroscope
#define GYRO_REGISTER_OUT_X_L 0x28 // X-axis angular rate data register (LSB)
#define GYRO_REGISTER_CTRL1 0x20 // Control register 1

#define SENSITIVITY_250DPS 0.00875 // Sensitivity for the gyroscope in degrees per second (250 dps)

int main() {
    int file;
    char filename[] = "/dev/i2c-1"; // I2C device file for Raspberry Pi
    uint8_t buffer[6];

    // Open the I2C bus
    if ((file = open(filename, O_RDWR)) < 0) {
        perror("Failed to open the bus.");
        return 1;
    }

    // Set the I2C slave address
    if (ioctl(file, I2C_SLAVE, GYRO_ADDRESS) < 0) {
        perror("Failed to acquire bus access and/or talk to slave.");
        return 1;
    }

    // Set the gyroscope to normal mode and enable all axes
    buffer[0] = GYRO_REGISTER_CTRL1;
    buffer[1] = 0x0F; // 0x0F: Normal mode, all axes enabled
    if (write(file, buffer, 2) != 2) {
        perror("Failed to write to the gyroscope.");
        return 1;
    }

    while (1) {
        // Read the angular rate data from the gyroscope
        buffer[0] = GYRO_REGISTER_OUT_X_L | 0x80; // Set MSB to enable auto-increment
        if (write(file, &buffer[0], 1) != 1) {
            perror("Failed to set register address.");
            return 1;
        }
        if (read(file, buffer, 6) != 6) {
            perror("Failed to read from the gyroscope.");
            return 1;
        }

        // Convert raw data to angular velocity (degrees per second)
        int16_t x_raw = (buffer[1] << 8) | buffer[0];
        int16_t y_raw = (buffer[3] << 8) | buffer[2];
        int16_t z_raw = (buffer[5] << 8) | buffer[4];

        float x_ang_vel = x_raw * SENSITIVITY_250DPS;
        float y_ang_vel = y_raw * SENSITIVITY_250DPS;
        float z_ang_vel = z_raw * SENSITIVITY_250DPS;

        // Print the angular velocities
        printf("X: %.2f deg/s, Y: %.2f deg/s, Z: %.2f deg/s\n", x_ang_vel, y_ang_vel, z_ang_vel);

        // Add code here to analyze frequency spectrum using FFT
       
        // Sleep for a while before reading again
        usleep(100000); // Sleep for 100ms (adjust as needed)
    }

    close(file);
    return 0;
}
